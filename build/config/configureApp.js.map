{"version":3,"sources":["../../src/config/configureApp.js"],"names":["ConfigureApp","app","logger","winston","createLogger","level","format","json","defaultMeta","service","exitOnError","transports","Console","stream","write","message","info","replace","use","bodyParser","urlencoded","extended","express","path","join","__dirname","indexRoute","req","res","next","err","Error","status","method","url","error","code"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACxC,MAAMC,MAAM,GAAGC,oBAAQC,YAAR,CAAqB;AAClCC,IAAAA,KAAK,EAAE,MAD2B;AAElCC,IAAAA,MAAM,EAAEH,oBAAQG,MAAR,CAAeC,IAAf,EAF0B;AAGlCC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAHqB;AAIlCC,IAAAA,WAAW,EAAE,KAJqB;AAKlCC,IAAAA,UAAU,EAAE,CAAC,IAAIR,oBAAQQ,UAAR,CAAmBC,OAAvB,EAAD;AALsB,GAArB,CAAf;;AAQAV,EAAAA,MAAM,CAACW,MAAP,GAAgB;AACdC,IAAAA,KAAK,EAAE,eAASC,OAAT,EAAkB;AACvBb,MAAAA,MAAM,CAACc,IAAP,CAAYD,OAAO,CAACE,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAZ;AACD;AAHa,GAAhB;AAMAhB,EAAAA,GAAG,CAACiB,GAAJ,CAAQ,uBAAR;AACAjB,EAAAA,GAAG,CAACiB,GAAJ,CAAQC,UAAU,CAACZ,IAAX,EAAR;AACAN,EAAAA,GAAG,CAACiB,GAAJ,CAAQC,UAAU,CAACC,UAAX,CAAsB;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAtB,CAAR;AACApB,EAAAA,GAAG,CAACiB,GAAJ,CACE,wBAAO,UAAP,EAAmB;AACjBL,IAAAA,MAAM,EAAEX,MAAM,CAACW;AADE,GAAnB,CADF;AAMAZ,EAAAA,GAAG,CAACiB,GAAJ,CAAQI,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;AACAxB,EAAAA,GAAG,CAACiB,GAAJ,CAAQ,GAAR,EAAaQ,cAAb;AAEAzB,EAAAA,GAAG,CAACiB,GAAJ,CAAQ,UAASS,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/B,QAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAU,WAAV,CAAV;AACAD,IAAAA,GAAG,CAACE,MAAJ,GAAa,GAAb;AACAJ,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqB;AACnBQ,MAAAA,OAAO,EAAEY,GAAG,CAACM,MAAJ,GAAa,GAAb,GAAmBN,GAAG,CAACO,GAAvB,GAA6B,YADnB;AAEnBC,MAAAA,KAAK,EAAE,iBAFY;AAGnBC,MAAAA,IAAI,EAAE;AAHa,KAArB;AAKAP,IAAAA,IAAI;AACL,GATD;AAUD","sourcesContent":["import * as bodyParser from 'body-parser'\r\nimport cors from 'cors'\r\nimport morgan from 'morgan'\r\nimport winston from 'winston'\r\nimport express from 'express'\r\nimport path from 'path'\r\nimport { router as indexRoute } from '../routes'\r\n\r\nexport default function ConfigureApp(app) {\r\n  const logger = winston.createLogger({\r\n    level: 'info',\r\n    format: winston.format.json(),\r\n    defaultMeta: { service: 'user-service' },\r\n    exitOnError: false,\r\n    transports: [new winston.transports.Console()],\r\n  })\r\n\r\n  logger.stream = {\r\n    write: function(message) {\r\n      logger.info(message.replace(/\\n$/, ''))\r\n    },\r\n  }\r\n\r\n  app.use(cors())\r\n  app.use(bodyParser.json())\r\n  app.use(bodyParser.urlencoded({ extended: false }))\r\n  app.use(\r\n    morgan('combined', {\r\n      stream: logger.stream,\r\n    })\r\n  )\r\n\r\n  app.use(express.static(path.join(__dirname, '../public')))\r\n  app.use('/', indexRoute)\r\n\r\n  app.use(function(req, res, next) {\r\n    let err = new Error('Not Found')\r\n    err.status = 404\r\n    res.status(404).json({\r\n      message: req.method + ' ' + req.url + ' not found',\r\n      error: 'NoEndpointExist',\r\n      code: 404,\r\n    })\r\n    next()\r\n  })\r\n}\r\n"],"file":"configureApp.js"}